openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_readAll
      summary: Get all users.
      description: Gets all users.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags: &ref_0
        - User
    post:
      operationId: UserController_createOne
      summary: Create a new user.
      description: Creates a new user.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request. Body does not contain required fields: [ ...fields ].'
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_readOne
      summary: Get single user.
      description: Gets single user by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: User not found.
      tags: *ref_0
    put:
      operationId: UserController_updateOne
      summary: Update user's password.
      description: Updates user's password by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '403':
          description: oldPassword is wrong.
        '404':
          description: User not found.
      tags: *ref_0
    delete:
      operationId: UserController_deleteOne
      summary: Delete user.
      description: Deletes user by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: User not found.
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistController_readAll
      summary: Get all artists.
      description: Gets all artists.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
      tags: &ref_1
        - Artist
    post:
      operationId: ArtistController_createOne
      summary: Create a new artist.
      description: Creates a new artist.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: 'Bad request. Body does not contain required fields: [ ...fields ].'
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistController_readOne
      summary: Get single artist.
      description: Gets single artist by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Artist not found.
      tags: *ref_1
    put:
      operationId: ArtistController_updateOne
      summary: Update artist information.
      description: Updates artist information by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Artist not found.
      tags: *ref_1
    delete:
      operationId: ArtistController_deleteOne
      summary: Delete artist.
      description: Deletes artist by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The artist has been deleted.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Artist not found.
      tags: *ref_1
  /track:
    get:
      operationId: TrackController_readAll
      summary: Get all tracks.
      description: Get all tracks.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags: &ref_2
        - Track
    post:
      operationId: TrackController_createOne
      summary: Create a new track.
      description: Creates a new track.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: 'Bad request. Body does not contain required fields: [ ...fields ].'
      tags: *ref_2
  /track/{id}:
    get:
      operationId: TrackController_readOne
      summary: Get single track.
      description: Get single track by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Track not found.
      tags: *ref_2
    put:
      operationId: TrackController_updateOne
      summary: Update track information.
      description: Updates track information by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Track not found.
      tags: *ref_2
    delete:
      operationId: TrackController_deleteOne
      summary: Delete track.
      description: Deletes track by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The track has been deleted.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Track not found.
      tags: *ref_2
  /album:
    get:
      operationId: AlbumController_readAll
      summary: Get all albums.
      description: Gets all albums.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
      tags: &ref_3
        - Album
    post:
      operationId: AlbumController_createOne
      summary: Create a new album.
      description: Creates a new album.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: 'Bad request. Body does not contain required fields: [ ...fields ].'
      tags: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_readOne
      summary: Get single album.
      description: Gets single album by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Album not found.
      tags: *ref_3
    put:
      operationId: AlbumController_updateOne
      summary: Update album information.
      description: Updates album information by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Album not found.
      tags: *ref_3
    delete:
      operationId: AlbumController_deleteOne
      summary: Delete album.
      description: Deletes album by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The album has been deleted.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Album not found.
      tags: *ref_3
  /favs:
    get:
      operationId: FavoritesController_readAll
      summary: Get all favorites.
      description: Gets all favorites.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
      tags: &ref_4
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to favorites.
      description: Adds track to favorites.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites successfully.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '422':
          description: Track with id doesn't exist.
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteTrack
      summary: Delete track from favorites.
      description: Deletes track from favorites by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track successfully deleted from favorites.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Track was not found.
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to favorites.
      description: Adds album to favorites.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites successfully.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '422':
          description: Album with id doesn't exist.
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteAlbum
      summary: Delete album from favorites.
      description: Deletes album from favorites by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album successfully deleted from favorites.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Album was not found.
      tags: *ref_4
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to favorites.
      description: Adds artist to favorites.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites successfully.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '422':
          description: Artist with id doesn't exist.
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteArtist
      summary: Delete artist from favorites.
      description: Deletes artist from favorites by ID (uuid).
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist successfully deleted from favorites.
        '400':
          description: Bad request. Id is invalid (not uuid).
        '404':
          description: Artist was not found.
      tags: *ref_4
info:
  title: Node.js Home Library Service
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
        login:
          type: string
          example: TestUser
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: TestLogin
        password:
          type: string
          example: TestPassword
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: OldPassword
        newPassword:
          type: string
          example: NewPassword
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
        name:
          type: string
          example: TestName
        grammy:
          type: boolean
          example: true
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: TestName
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: TestName
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        albumId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        duration:
          type: number
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        albumId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        duration:
          type: number
          example: 262
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        albumId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
        duration:
          type: number
          example: 262
      required:
        - name
        - artistId
        - albumId
        - duration
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          format: uuid
          example: 68e9f8c8-472a-49d9-a244-4ead304e6038
          nullable: true
      required:
        - name
        - year
        - artistId
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
